{"ast":null,"code":"import * as i0 from \"@angular/core\";\nconst exampleStandardTemplate = `\n<div class=\"ui segment\">\n    <sui-progress [value]=\"value\" [showProgress]=\"progress\" [maximum]=\"maximum\" [precision]=\"precision\">\n        Progress Bar Label\n    </sui-progress>\n\n    <div class=\"ui small form\">\n        <div class=\"four fields\">\n            <div class=\"field\">\n                <label>Value</label>\n                <div class=\"ui action input\">\n                    <input type=\"number\" [(ngModel)]=\"value\">\n\n                    <button class=\"ui green icon button\" (click)=\"value = value + 10\">\n                        <i class=\"plus icon\"></i>\n                    </button>\n                    <button class=\"ui red icon button\" (click)=\"value = value - 10\">\n                        <i class=\"minus icon\"></i>\n                    </button>\n                </div>\n            </div>\n            <div class=\"field\">\n                <label>Maximum</label>\n                <input type=\"number\" [(ngModel)]=\"maximum\">\n            </div>\n            <div class=\"field\">\n                <label>Precision</label>\n                <input type=\"number\" [(ngModel)]=\"precision\">\n            </div>\n        </div>\n        <div class=\"field\">\n            <sui-checkbox [(ngModel)]=\"progress\">Show Progress?</sui-checkbox>\n        </div>\n    </div>\n</div>\n`;\nconst exampleVariationsTemplate = `\n<div class=\"ui segment\">\n    <sui-progress class=\"top attached purple active\" [value]=\"changingValue\" [autoSuccess]=\"false\"></sui-progress>\n    <sui-progress class=\"indicating\" [value]=\"changingValue\">Indicating</sui-progress>\n    <sui-progress class=\"active\" [value]=\"changingValue\">Active</sui-progress>\n    <sui-progress class=\"warning\" [value]=\"changingValue\">Warning</sui-progress>\n    <sui-progress class=\"error\" [value]=\"changingValue\">Error</sui-progress>\n    <sui-progress class=\"disabled\" [value]=\"randomValue\">Disabled</sui-progress>\n    <sui-progress class=\"tiny\" [value]=\"changingValue\">Tiny (autohides progress)</sui-progress>\n    <sui-progress class=\"bottom attached indicating active\" [value]=\"changingValue\"></sui-progress>\n</div>\n`;\nexport let ProgressPage = /*#__PURE__*/(() => {\n  var _class;\n  class ProgressPage {\n    constructor() {\n      this.api = [{\n        selector: \"<sui-progress>\",\n        properties: [{\n          name: \"value\",\n          type: \"number\",\n          description: \"Sets whether or not the element is collapsed. \" + \"Values not in <code>[0, ..., maximum]</code> are automatically bounded.\",\n          defaultValue: \"0\"\n        }, {\n          name: \"maximum\",\n          type: \"number\",\n          description: \"Sets the maximum value. When <code>value > maximum</code> the progress bar is full. \" + \"Use the 1st example to try out this functionality.\",\n          defaultValue: \"100\"\n        }, {\n          name: \"precision\",\n          type: \"number\",\n          description: \"Sets the number of decimal places on the current progress label.\",\n          defaultValue: \"0\"\n        }, {\n          name: \"showProgress\",\n          type: \"boolean\",\n          description: \"Whether or not the current progress label is displayed.\",\n          defaultValue: \"true\"\n        }, {\n          name: \"autoSuccess\",\n          type: \"boolean\",\n          description: \"Sets whether or not the progress bar automatically turns green when <code>value == maximum</code>.\",\n          defaultValue: \"true\"\n        }]\n      }];\n      this.exampleStandardTemplate = exampleStandardTemplate;\n      this.exampleVariationsTemplate = exampleVariationsTemplate;\n    }\n  }\n  _class = ProgressPage;\n  _class.ɵfac = function ProgressPage_Factory(t) {\n    return new (t || _class)();\n  };\n  _class.ɵcmp = /*@__PURE__*/i0.ɵɵdefineComponent({\n    type: _class,\n    selectors: [[\"demo-page-progress\"]],\n    decls: 26,\n    vars: 3,\n    consts: [[\"header\", \"\"], [\"sub-header\", \"\"], [1, \"ui\", \"dividing\", \"header\"], [3, \"code\"], [\"info\", \"\"], [1, \"ui\", \"header\"], [\"result\", \"\"], [\"id\", \"api\", 1, \"ui\", \"dividing\", \"header\"], [3, \"api\"]],\n    template: function ProgressPage_Template(rf, ctx) {\n      if (rf & 1) {\n        i0.ɵɵelementStart(0, \"demo-page-title\")(1, \"div\", 0);\n        i0.ɵɵtext(2, \"Progress\");\n        i0.ɵɵelementEnd();\n        i0.ɵɵelementStart(3, \"div\", 1)(4, \"p\");\n        i0.ɵɵtext(5, \"A progress bar shows the progression of a task\");\n        i0.ɵɵelementEnd()()();\n        i0.ɵɵelementStart(6, \"demo-page-content\")(7, \"h2\", 2);\n        i0.ɵɵtext(8, \"Examples\");\n        i0.ɵɵelementEnd();\n        i0.ɵɵelementStart(9, \"demo-example\", 3)(10, \"div\", 4)(11, \"h4\", 5);\n        i0.ɵɵtext(12, \"Standard\");\n        i0.ɵɵelementEnd();\n        i0.ɵɵelementStart(13, \"p\");\n        i0.ɵɵtext(14, \"A standard progress bar\");\n        i0.ɵɵelementEnd()();\n        i0.ɵɵelement(15, \"example-progress-standard\", 6);\n        i0.ɵɵelementEnd();\n        i0.ɵɵelementStart(16, \"demo-example\", 3)(17, \"div\", 4)(18, \"h4\", 5);\n        i0.ɵɵtext(19, \"Variations\");\n        i0.ɵɵelementEnd();\n        i0.ɵɵelementStart(20, \"p\");\n        i0.ɵɵtext(21, \"Various styles applicable to the progress bar\");\n        i0.ɵɵelementEnd()();\n        i0.ɵɵelement(22, \"example-progress-variations\", 6);\n        i0.ɵɵelementEnd();\n        i0.ɵɵelementStart(23, \"h2\", 7);\n        i0.ɵɵtext(24, \"API\");\n        i0.ɵɵelementEnd();\n        i0.ɵɵelement(25, \"demo-api\", 8);\n        i0.ɵɵelementEnd();\n      }\n      if (rf & 2) {\n        i0.ɵɵadvance(9);\n        i0.ɵɵproperty(\"code\", ctx.exampleStandardTemplate);\n        i0.ɵɵadvance(7);\n        i0.ɵɵproperty(\"code\", ctx.exampleVariationsTemplate);\n        i0.ɵɵadvance(9);\n        i0.ɵɵproperty(\"api\", ctx.api);\n      }\n    },\n    encapsulation: 2\n  });\n  return ProgressPage;\n})();\nexport let ProgressExampleStandard = /*#__PURE__*/(() => {\n  var _class2;\n  class ProgressExampleStandard {\n    constructor() {\n      this.value = 55;\n      this.progress = true;\n      this.maximum = 100;\n      this.precision = 0;\n    }\n  }\n  _class2 = ProgressExampleStandard;\n  _class2.ɵfac = function ProgressExampleStandard_Factory(t) {\n    return new (t || _class2)();\n  };\n  _class2.ɵcmp = /*@__PURE__*/i0.ɵɵdefineComponent({\n    type: _class2,\n    selectors: [[\"example-progress-standard\"]],\n    decls: 25,\n    vars: 8,\n    consts: [[1, \"ui\", \"segment\"], [3, \"value\", \"showProgress\", \"maximum\", \"precision\"], [1, \"ui\", \"small\", \"form\"], [1, \"four\", \"fields\"], [1, \"field\"], [1, \"ui\", \"action\", \"input\"], [\"type\", \"number\", 3, \"ngModel\", \"ngModelChange\"], [1, \"ui\", \"green\", \"icon\", \"button\", 3, \"click\"], [1, \"plus\", \"icon\"], [1, \"ui\", \"red\", \"icon\", \"button\", 3, \"click\"], [1, \"minus\", \"icon\"], [3, \"ngModel\", \"ngModelChange\"]],\n    template: function ProgressExampleStandard_Template(rf, ctx) {\n      if (rf & 1) {\n        i0.ɵɵelementStart(0, \"div\", 0)(1, \"sui-progress\", 1);\n        i0.ɵɵtext(2, \" Progress Bar Label \");\n        i0.ɵɵelementEnd();\n        i0.ɵɵelementStart(3, \"div\", 2)(4, \"div\", 3)(5, \"div\", 4)(6, \"label\");\n        i0.ɵɵtext(7, \"Value\");\n        i0.ɵɵelementEnd();\n        i0.ɵɵelementStart(8, \"div\", 5)(9, \"input\", 6);\n        i0.ɵɵlistener(\"ngModelChange\", function ProgressExampleStandard_Template_input_ngModelChange_9_listener($event) {\n          return ctx.value = $event;\n        });\n        i0.ɵɵelementEnd();\n        i0.ɵɵelementStart(10, \"button\", 7);\n        i0.ɵɵlistener(\"click\", function ProgressExampleStandard_Template_button_click_10_listener() {\n          return ctx.value = ctx.value + 10;\n        });\n        i0.ɵɵelement(11, \"i\", 8);\n        i0.ɵɵelementEnd();\n        i0.ɵɵelementStart(12, \"button\", 9);\n        i0.ɵɵlistener(\"click\", function ProgressExampleStandard_Template_button_click_12_listener() {\n          return ctx.value = ctx.value - 10;\n        });\n        i0.ɵɵelement(13, \"i\", 10);\n        i0.ɵɵelementEnd()()();\n        i0.ɵɵelementStart(14, \"div\", 4)(15, \"label\");\n        i0.ɵɵtext(16, \"Maximum\");\n        i0.ɵɵelementEnd();\n        i0.ɵɵelementStart(17, \"input\", 6);\n        i0.ɵɵlistener(\"ngModelChange\", function ProgressExampleStandard_Template_input_ngModelChange_17_listener($event) {\n          return ctx.maximum = $event;\n        });\n        i0.ɵɵelementEnd()();\n        i0.ɵɵelementStart(18, \"div\", 4)(19, \"label\");\n        i0.ɵɵtext(20, \"Precision\");\n        i0.ɵɵelementEnd();\n        i0.ɵɵelementStart(21, \"input\", 6);\n        i0.ɵɵlistener(\"ngModelChange\", function ProgressExampleStandard_Template_input_ngModelChange_21_listener($event) {\n          return ctx.precision = $event;\n        });\n        i0.ɵɵelementEnd()()();\n        i0.ɵɵelementStart(22, \"div\", 4)(23, \"sui-checkbox\", 11);\n        i0.ɵɵlistener(\"ngModelChange\", function ProgressExampleStandard_Template_sui_checkbox_ngModelChange_23_listener($event) {\n          return ctx.progress = $event;\n        });\n        i0.ɵɵtext(24, \"Show Progress?\");\n        i0.ɵɵelementEnd()()()();\n      }\n      if (rf & 2) {\n        i0.ɵɵadvance(1);\n        i0.ɵɵproperty(\"value\", ctx.value)(\"showProgress\", ctx.progress)(\"maximum\", ctx.maximum)(\"precision\", ctx.precision);\n        i0.ɵɵadvance(8);\n        i0.ɵɵproperty(\"ngModel\", ctx.value);\n        i0.ɵɵadvance(8);\n        i0.ɵɵproperty(\"ngModel\", ctx.maximum);\n        i0.ɵɵadvance(4);\n        i0.ɵɵproperty(\"ngModel\", ctx.precision);\n        i0.ɵɵadvance(2);\n        i0.ɵɵproperty(\"ngModel\", ctx.progress);\n      }\n    },\n    encapsulation: 2\n  });\n  return ProgressExampleStandard;\n})();\nexport let ProgressExampleVariations = /*#__PURE__*/(() => {\n  var _class3;\n  class ProgressExampleVariations {\n    constructor() {\n      this.value = 55;\n      this.changingValue = -20;\n      this.randomValue = 0;\n      this.updateChangingValue();\n      this.randomValue = Math.floor(Math.random() * 100) + 1;\n    }\n    updateChangingValue() {\n      setTimeout(() => {\n        if (this.changingValue > 120) {\n          this.changingValue = -20;\n        } else {\n          this.changingValue += 2;\n        }\n        this.updateChangingValue();\n      }, 75);\n    }\n  }\n  _class3 = ProgressExampleVariations;\n  _class3.ɵfac = function ProgressExampleVariations_Factory(t) {\n    return new (t || _class3)();\n  };\n  _class3.ɵcmp = /*@__PURE__*/i0.ɵɵdefineComponent({\n    type: _class3,\n    selectors: [[\"example-progress-variations\"]],\n    decls: 15,\n    vars: 9,\n    consts: [[1, \"ui\", \"segment\"], [1, \"top\", \"attached\", \"purple\", \"active\", 3, \"value\", \"autoSuccess\"], [1, \"indicating\", 3, \"value\"], [1, \"active\", 3, \"value\"], [1, \"warning\", 3, \"value\"], [1, \"error\", 3, \"value\"], [1, \"disabled\", 3, \"value\"], [1, \"tiny\", 3, \"value\"], [1, \"bottom\", \"attached\", \"indicating\", \"active\", 3, \"value\"]],\n    template: function ProgressExampleVariations_Template(rf, ctx) {\n      if (rf & 1) {\n        i0.ɵɵelementStart(0, \"div\", 0);\n        i0.ɵɵelement(1, \"sui-progress\", 1);\n        i0.ɵɵelementStart(2, \"sui-progress\", 2);\n        i0.ɵɵtext(3, \"Indicating\");\n        i0.ɵɵelementEnd();\n        i0.ɵɵelementStart(4, \"sui-progress\", 3);\n        i0.ɵɵtext(5, \"Active\");\n        i0.ɵɵelementEnd();\n        i0.ɵɵelementStart(6, \"sui-progress\", 4);\n        i0.ɵɵtext(7, \"Warning\");\n        i0.ɵɵelementEnd();\n        i0.ɵɵelementStart(8, \"sui-progress\", 5);\n        i0.ɵɵtext(9, \"Error\");\n        i0.ɵɵelementEnd();\n        i0.ɵɵelementStart(10, \"sui-progress\", 6);\n        i0.ɵɵtext(11, \"Disabled\");\n        i0.ɵɵelementEnd();\n        i0.ɵɵelementStart(12, \"sui-progress\", 7);\n        i0.ɵɵtext(13, \"Tiny (autohides progress)\");\n        i0.ɵɵelementEnd();\n        i0.ɵɵelement(14, \"sui-progress\", 8);\n        i0.ɵɵelementEnd();\n      }\n      if (rf & 2) {\n        i0.ɵɵadvance(1);\n        i0.ɵɵproperty(\"value\", ctx.changingValue)(\"autoSuccess\", false);\n        i0.ɵɵadvance(1);\n        i0.ɵɵproperty(\"value\", ctx.changingValue);\n        i0.ɵɵadvance(2);\n        i0.ɵɵproperty(\"value\", ctx.changingValue);\n        i0.ɵɵadvance(2);\n        i0.ɵɵproperty(\"value\", ctx.changingValue);\n        i0.ɵɵadvance(2);\n        i0.ɵɵproperty(\"value\", ctx.changingValue);\n        i0.ɵɵadvance(2);\n        i0.ɵɵproperty(\"value\", ctx.randomValue);\n        i0.ɵɵadvance(2);\n        i0.ɵɵproperty(\"value\", ctx.changingValue);\n        i0.ɵɵadvance(2);\n        i0.ɵɵproperty(\"value\", ctx.changingValue);\n      }\n    },\n    encapsulation: 2\n  });\n  return ProgressExampleVariations;\n})();\nexport const ProgressPageComponents = [ProgressPage, ProgressExampleStandard, ProgressExampleVariations];","map":null,"metadata":{},"sourceType":"module","externalDependencies":[]}