{"ast":null,"code":"var __decorate = this && this.__decorate || function (decorators, target, key, desc) {\n  var c = arguments.length,\n    r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc,\n    d;\n  if (typeof Reflect === \"object\" && typeof Reflect.decorate === \"function\") r = Reflect.decorate(decorators, target, key, desc);else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;\n  return c > 3 && r && Object.defineProperty(target, key, r), r;\n};\nvar __metadata = this && this.__metadata || function (k, v) {\n  if (typeof Reflect === \"object\" && typeof Reflect.metadata === \"function\") return Reflect.metadata(k, v);\n};\nvar _a;\nimport { Component } from \"@angular/core\";\nimport { SuiLocalizationService } from \"ng2-semantic-ui\";\nimport locales from \"ng2-semantic-ui/locales\";\nimport * as i0 from \"@angular/core\";\nfunction LocalizationPage_li_56_div_3_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵelementStart(0, \"div\", 17);\n    i0.ɵɵtext(1, \"Default\");\n    i0.ɵɵelementEnd();\n  }\n}\nfunction LocalizationPage_li_56_div_4_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵelementStart(0, \"div\", 18);\n    i0.ɵɵtext(1);\n    i0.ɵɵelementEnd();\n  }\n  if (rf & 2) {\n    const lang_r1 = i0.ɵɵnextContext().$implicit;\n    i0.ɵɵadvance(1);\n    i0.ɵɵtextInterpolate(lang_r1.code);\n  }\n}\nfunction LocalizationPage_li_56_ul_5_li_1_div_3_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵelementStart(0, \"div\", 17);\n    i0.ɵɵtext(1, \"Default\");\n    i0.ɵɵelementEnd();\n  }\n}\nfunction LocalizationPage_li_56_ul_5_li_1_div_4_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵelementStart(0, \"div\", 18);\n    i0.ɵɵtext(1);\n    i0.ɵɵelementEnd();\n  }\n  if (rf & 2) {\n    const child_r7 = i0.ɵɵnextContext().$implicit;\n    i0.ɵɵadvance(1);\n    i0.ɵɵtextInterpolate(child_r7.code);\n  }\n}\nfunction LocalizationPage_li_56_ul_5_li_1_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵelementStart(0, \"li\", 12)(1, \"div\", 13);\n    i0.ɵɵtext(2);\n    i0.ɵɵtemplate(3, LocalizationPage_li_56_ul_5_li_1_div_3_Template, 2, 0, \"div\", 14);\n    i0.ɵɵelementEnd();\n    i0.ɵɵtemplate(4, LocalizationPage_li_56_ul_5_li_1_div_4_Template, 2, 1, \"div\", 15);\n    i0.ɵɵelementEnd();\n  }\n  if (rf & 2) {\n    const child_r7 = ctx.$implicit;\n    i0.ɵɵadvance(2);\n    i0.ɵɵtextInterpolate1(\" \", child_r7.name, \"\\u00A0 \");\n    i0.ɵɵadvance(1);\n    i0.ɵɵproperty(\"ngIf\", child_r7.default);\n    i0.ɵɵadvance(1);\n    i0.ɵɵproperty(\"ngIf\", child_r7.code);\n  }\n}\nfunction LocalizationPage_li_56_ul_5_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵelementStart(0, \"ul\");\n    i0.ɵɵtemplate(1, LocalizationPage_li_56_ul_5_li_1_Template, 5, 3, \"li\", 11);\n    i0.ɵɵelementEnd();\n  }\n  if (rf & 2) {\n    const lang_r1 = i0.ɵɵnextContext().$implicit;\n    i0.ɵɵadvance(1);\n    i0.ɵɵproperty(\"ngForOf\", lang_r1.children);\n  }\n}\nfunction LocalizationPage_li_56_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵelementStart(0, \"li\", 12)(1, \"div\", 13);\n    i0.ɵɵtext(2);\n    i0.ɵɵtemplate(3, LocalizationPage_li_56_div_3_Template, 2, 0, \"div\", 14);\n    i0.ɵɵelementEnd();\n    i0.ɵɵtemplate(4, LocalizationPage_li_56_div_4_Template, 2, 1, \"div\", 15);\n    i0.ɵɵtemplate(5, LocalizationPage_li_56_ul_5_Template, 2, 1, \"ul\", 16);\n    i0.ɵɵelementEnd();\n  }\n  if (rf & 2) {\n    const lang_r1 = ctx.$implicit;\n    i0.ɵɵadvance(2);\n    i0.ɵɵtextInterpolate1(\" \", lang_r1.name, \"\\u00A0 \");\n    i0.ɵɵadvance(1);\n    i0.ɵɵproperty(\"ngIf\", lang_r1.default);\n    i0.ɵɵadvance(1);\n    i0.ɵɵproperty(\"ngIf\", lang_r1.code);\n    i0.ɵɵadvance(1);\n    i0.ɵɵproperty(\"ngIf\", lang_r1.children);\n  }\n}\nconst exampleTemplate = `\n<div class=\"ui segments\">\n    <div class=\"ui segment\">\n        <p>Language</p>\n        <sui-select class=\"selection\"\n                    [(ngModel)]=\"language\"\n                    [options]=\"languages\"\n                    labelField=\"name\"\n                    valueField=\"code\"\n                    [isSearchable]=\"true\"\n                    #lang>\n\n            <sui-select-option *ngFor=\"let l of lang.availableOptions\"\n                               [value]=\"l\"></sui-select-option>\n        </sui-select>\n    </div>\n    <div class=\"ui segment\">\n        <div class=\"ui left icon fluid input\">\n            <i class=\"calendar icon\"></i>\n            <input suiDatepicker pickerMode=\"date\" [pickerUseNativeOnMobile]=\"false\">\n        </div>\n    </div>\n    <div class=\"ui segment\">\n        <sui-select class=\"fluid selection\">\n            <sui-select-option value=\"Option 1\"></sui-select-option>\n            <sui-select-option value=\"Option 2\"></sui-select-option>\n            <sui-select-option value=\"Option 3\"></sui-select-option>\n        </sui-select>\n    </div>\n</div>\n`;\nconst supportedLanguages = [{\n  name: \"English\",\n  children: [{\n    name: \"Australian\",\n    code: \"en-AU\"\n  }, {\n    name: \"UK\",\n    code: \"en-GB\",\n    default: true\n  }, {\n    name: \"US\",\n    code: \"en-US\"\n  }]\n}, {\n  name: \"Spanish\",\n  code: \"es\"\n}, {\n  name: \"Italian\",\n  code: \"it\"\n}, {\n  name: \"Portuguese\",\n  code: \"pt\"\n}, {\n  name: \"French\",\n  code: \"fr\"\n}, {\n  name: \"German\",\n  code: \"de\"\n}, {\n  name: \"Russian\",\n  code: \"ru\"\n}, {\n  name: \"Hebrew\",\n  code: \"he\"\n}, {\n  name: \"Dutch\",\n  code: \"nl\"\n}, {\n  name: \"Georgian\",\n  code: \"ge\"\n}];\nexport let LocalizationPage = /*#__PURE__*/(() => {\n  var _class;\n  class LocalizationPage {\n    constructor() {\n      this.localizationCode = `\nimport {SuiLocalizationService} from \"ng2-semantic-ui\";\n// We'll use Spanish for this example.\nimport es from \"ng2-semantic-ui/locales/es\";\n\n@Component({\n    selector: \"app-root\",\n    ...\n})\nexport class AppComponent {\n    constructor(public localizationService:SuiLocalizationService) {\n        // Load the Spanish translations into the Localization Service.\n        localizationService.load(\"es\", es);\n        // Set the current language to Spanish.\n        localizationService.setLanguage(\"es\");\n    }\n}\n`;\n      this.customizationCode = `\nimport {SuiLocalizationService} from \"ng2-semantic-ui\";\n// This example uses French.\nimport fr from \"ng2-semantic-ui/locales/fr\";\n\n@Component({\n    selector: \"app-root\",\n    ...\n})\nexport class AppComponent {\n    constructor(public localizationService:SuiLocalizationService) {\n        // Start by choosing a \"fallback\" language,\n        // i.e. which language to use if you don't provide a certain value.\n        localizationService.load(\"fr\", fr);\n\n        // Next, modify the \"fallback\" language with your custom values:\n        localizationService.patch(\"fr\", {\n            search: {\n                placeholder: \"Custom!\"\n            }\n        });\n\n        // Finally, update the current language:\n        localizationService.setLanguage(\"fr\");\n    }\n}\n`;\n      this.valuesInterface = `\ninterface ILocaleValues {\n    datepicker: {\n        months:string[], // Full month names\n        monthsShort:string[], // Short month names (3 letters)\n        weekdays:string[], // Full day names\n        weekdaysShort:string[], // Short day names (3 letters)\n        weekdaysNarrow:string[], // Narrow day names (1/2 letters)\n        timesOfDay:string[]; // Full time of day names (2 values only)\n        timesOfDayUppercase:string[]; // Short uppercase time of day names (2 values only)\n        timesOfDayLowercase:string[]; // Short lowercase time of day names (2 values only)\n        formats: {\n            time:string, // Date display format for 'time' mode\n            datetime:string, // Display format for 'datetime' mode\n            date:string, // etc.\n            month:string,\n            year:string\n        },\n        firstDayOfWeek:number // First day of the week, [0..6], 0 is Sunday, 6 is Saturday\n    },\n    search: {\n        placeholder:string, // Default placeholder for search input\n        noResults: { // Message shown when there are no search results\n            header:string,\n            message:string\n        }\n    },\n    select: {\n        noResultsMessage:string, // Shown when there are no search results\n        single: { // Specific options for single-select\n            placeholder:string // Default placeholder\n        },\n        multi: { // Specific options for multi-select\n            placeholder:string, // Default placeholder\n            maxSelectedMessage:string // Shown when max options selected (use #{max} to display value)\n        }\n    }\n}\n`;\n      this.exampleTemplate = exampleTemplate;\n      this.supportedLanguages = supportedLanguages;\n    }\n  }\n  _class = LocalizationPage;\n  _class.ɵfac = function LocalizationPage_Factory(t) {\n    return new (t || _class)();\n  };\n  _class.ɵcmp = /*@__PURE__*/i0.ɵɵdefineComponent({\n    type: _class,\n    selectors: [[\"demo-page-localization\"]],\n    decls: 57,\n    vars: 5,\n    consts: [[\"header\", \"\"], [\"sub-header\", \"\"], [1, \"ui\", \"dividing\", \"header\"], [1, \"ui\", \"segment\"], [\"language\", \"typescript\", 3, \"src\"], [3, \"code\"], [\"info\", \"\"], [1, \"ui\", \"header\"], [\"result\", \"\"], [\"href\", \"https://github.com/edcarroll/ng2-semantic-ui/pulls\"], [1, \"ui\", \"list\"], [\"class\", \"item\", 4, \"ngFor\", \"ngForOf\"], [1, \"item\"], [1, \"header\"], [\"class\", \"ui tiny teal horizontal label\", 4, \"ngIf\"], [\"class\", \"description\", 4, \"ngIf\"], [4, \"ngIf\"], [1, \"ui\", \"tiny\", \"teal\", \"horizontal\", \"label\"], [1, \"description\"]],\n    template: function LocalizationPage_Template(rf, ctx) {\n      if (rf & 1) {\n        i0.ɵɵelementStart(0, \"demo-page-title\")(1, \"div\", 0);\n        i0.ɵɵtext(2, \"Localization\");\n        i0.ɵɵelementEnd();\n        i0.ɵɵelementStart(3, \"div\", 1)(4, \"p\");\n        i0.ɵɵtext(5, \"Localization lets you control what language components display in\");\n        i0.ɵɵelementEnd()()();\n        i0.ɵɵelementStart(6, \"demo-page-content\")(7, \"h2\", 2);\n        i0.ɵɵtext(8, \"Usage\");\n        i0.ɵɵelementEnd();\n        i0.ɵɵelementStart(9, \"p\");\n        i0.ɵɵtext(10, \" The localization service allows you to choose the language that the components are displayed in. Note that these settings only affect components with pre-defined text, such as the datepicker. \");\n        i0.ɵɵelementEnd();\n        i0.ɵɵelementStart(11, \"p\");\n        i0.ɵɵtext(12, \" To change locale, inject the \");\n        i0.ɵɵelementStart(13, \"code\");\n        i0.ɵɵtext(14, \"SuiLocalizationService\");\n        i0.ɵɵelementEnd();\n        i0.ɵɵtext(15, \" service into your root component, as well as importing a locale from those provided by the library. \");\n        i0.ɵɵelementEnd();\n        i0.ɵɵelementStart(16, \"div\", 3);\n        i0.ɵɵelement(17, \"demo-codeblock\", 4);\n        i0.ɵɵelementEnd();\n        i0.ɵɵelementStart(18, \"p\");\n        i0.ɵɵtext(19, \"All components that display any non customizable text will now display in Spanish.\");\n        i0.ɵɵelementEnd();\n        i0.ɵɵelementStart(20, \"h2\", 2);\n        i0.ɵɵtext(21, \"Example\");\n        i0.ɵɵelementEnd();\n        i0.ɵɵelementStart(22, \"demo-example\", 5)(23, \"div\", 6)(24, \"h4\", 7);\n        i0.ɵɵtext(25, \"Change Language\");\n        i0.ɵɵelementEnd()();\n        i0.ɵɵelement(26, \"example-localization\", 8);\n        i0.ɵɵelementEnd();\n        i0.ɵɵelementStart(27, \"h2\", 2);\n        i0.ɵɵtext(28, \"Customization\");\n        i0.ɵɵelementEnd();\n        i0.ɵɵelementStart(29, \"p\");\n        i0.ɵɵtext(30, \"If you'd like to provide your own custom translations for some of the values, you can do the following:\");\n        i0.ɵɵelementEnd();\n        i0.ɵɵelementStart(31, \"div\", 3);\n        i0.ɵɵelement(32, \"demo-codeblock\", 4);\n        i0.ɵɵelementEnd();\n        i0.ɵɵelementStart(33, \"p\");\n        i0.ɵɵtext(34, \"The 2nd argument of \");\n        i0.ɵɵelementStart(35, \"code\");\n        i0.ɵɵtext(36, \"load\");\n        i0.ɵɵelementEnd();\n        i0.ɵɵtext(37, \" & \");\n        i0.ɵɵelementStart(38, \"code\");\n        i0.ɵɵtext(39, \"patch\");\n        i0.ɵɵelementEnd();\n        i0.ɵɵtext(40, \" takes a partial (all optional) \");\n        i0.ɵɵelementStart(41, \"code\");\n        i0.ɵɵtext(42, \"ILocaleValues\");\n        i0.ɵɵelementEnd();\n        i0.ɵɵtext(43, \" object, defined below.\");\n        i0.ɵɵelementEnd();\n        i0.ɵɵelementStart(44, \"div\", 3);\n        i0.ɵɵelement(45, \"demo-codeblock\", 4);\n        i0.ɵɵelementEnd();\n        i0.ɵɵelementStart(46, \"h2\", 2);\n        i0.ɵɵtext(47, \"Built in Languages\");\n        i0.ɵɵelementEnd();\n        i0.ɵɵelementStart(48, \"p\");\n        i0.ɵɵtext(49, \"Below is a list of all languages supported out of the box.\");\n        i0.ɵɵelementEnd();\n        i0.ɵɵelementStart(50, \"p\");\n        i0.ɵɵtext(51, \"Your language isn't there? \");\n        i0.ɵɵelementStart(52, \"a\", 9);\n        i0.ɵɵtext(53, \"Submit a pull request\");\n        i0.ɵɵelementEnd();\n        i0.ɵɵtext(54, \" with your translations.\");\n        i0.ɵɵelementEnd();\n        i0.ɵɵelementStart(55, \"ul\", 10);\n        i0.ɵɵtemplate(56, LocalizationPage_li_56_Template, 6, 4, \"li\", 11);\n        i0.ɵɵelementEnd()();\n      }\n      if (rf & 2) {\n        i0.ɵɵadvance(17);\n        i0.ɵɵproperty(\"src\", ctx.localizationCode);\n        i0.ɵɵadvance(5);\n        i0.ɵɵproperty(\"code\", ctx.exampleTemplate);\n        i0.ɵɵadvance(10);\n        i0.ɵɵproperty(\"src\", ctx.customizationCode);\n        i0.ɵɵadvance(13);\n        i0.ɵɵproperty(\"src\", ctx.valuesInterface);\n        i0.ɵɵadvance(11);\n        i0.ɵɵproperty(\"ngForOf\", ctx.supportedLanguages);\n      }\n    },\n    encapsulation: 2\n  });\n  return LocalizationPage;\n})();\nexport let LocalizationExample = class LocalizationExample {\n  get language() {\n    return this.localizationService.language;\n  }\n  set language(language) {\n    this.localizationService.setLanguage(language);\n  }\n  constructor(localizationService) {\n    this.localizationService = localizationService;\n    this.languages = [];\n    supportedLanguages.forEach(l => {\n      if (l.children) {\n        l.children.forEach(c => {\n          this.languages.push({\n            name: `${l.name} (${c.name})`,\n            code: `${c.code}`\n          });\n        });\n        return;\n      }\n      this.languages.push(l);\n    });\n    this.localizationService.setLanguage(\"en-GB\");\n    Object.keys(locales).forEach(k => this.localizationService.load(k, locales[k]));\n  }\n  ngOnDestroy() {\n    this.localizationService.setLanguage(\"en-GB\");\n  }\n};\nLocalizationExample = __decorate([Component({\n  selector: \"example-localization\",\n  template: exampleTemplate\n}), __metadata(\"design:paramtypes\", [typeof (_a = typeof SuiLocalizationService !== \"undefined\" && SuiLocalizationService) === \"function\" ? _a : Object])], LocalizationExample);\nexport const LocalizationPageComponents = [LocalizationPage, LocalizationExample];","map":null,"metadata":{},"sourceType":"module","externalDependencies":[]}