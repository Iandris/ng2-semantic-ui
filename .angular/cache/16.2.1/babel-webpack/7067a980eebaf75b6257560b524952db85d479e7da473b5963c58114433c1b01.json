{"ast":null,"code":"import * as i0 from \"@angular/core\";\nconst exampleStandardTemplate = `\n<sui-accordion [closeOthers]=\"false\">\n    <sui-accordion-panel [isOpen]=\"true\">\n        <div title>\n            <i class=\"dropdown icon\"></i>\n            Intially Expanded Panel\n        </div>\n        <div content>\n            <p>Using <code>[isOpen]</code> sets the panel to be expanded.</p>\n            <p>Use <code>(isOpenChange)</code> to catch when the panel is toggled.</p>\n            <p>Supports <code>[(isOpen)]</code> syntax.</p>\n        </div>\n    </sui-accordion-panel>\n    <sui-accordion-panel [isDisabled]=\"true\" [isOpen]=\"true\">\n        <div title>\n            <i class=\"dropdown icon\"></i>\n            Disabled Panel\n        </div>\n        <div content>\n            <p>Setting <code>[isDisabled]</code> to <code>true</code> stops the user from being able to toggle the panel.</p>\n        </div>\n    </sui-accordion-panel>\n    <sui-accordion-panel>\n        <div title>\n            <i class=\"dropdown icon\"></i>\n            Final Panel\n        </div>\n        <div content>\n            <p>This is the final panel.</p>\n            <p>Opening this one doesn't affect the others as <code>[closeOthers]</code> is set to <code>false</code>.</p>\n        </div>\n    </sui-accordion-panel>\n</sui-accordion>\n`;\nconst exampleStyledTemplate = `\n<sui-accordion class=\"styled fluid\">\n    <sui-accordion-panel [isOpen]=\"true\">\n        <div title>\n            <i class=\"dropdown icon\"></i>\n            First Panel\n        </div>\n        <div content>\n            <p>Add classes to the <code>sui-accordion</code> element to apply styles.</p>\n        </div>\n    </sui-accordion-panel>\n    <sui-accordion-panel>\n        <div title>\n            <i class=\"dropdown icon\"></i>\n            Second Panel\n        </div>\n        <div content>\n            <p>Second panel content.</p>\n        </div>\n    </sui-accordion-panel>\n</sui-accordion>\n`;\nconst exampleManualTemplate = `\n<sui-accordion class=\"styled fluid\">\n    <sui-accordion-panel [(isOpen)]=\"panelOpen\" [isDisabled]=\"true\">\n        <div title>\n            <i class=\"dropdown icon\" (click)=\"panelOpen = !panelOpen\"></i>\n            Manual Panel\n        </div>\n        <div content>\n            <p>Content</p>\n        </div>\n    </sui-accordion-panel>\n</sui-accordion>\n`;\nexport let AccordionPage = /*#__PURE__*/(() => {\n  var _class;\n  class AccordionPage {\n    constructor() {\n      this.api = [{\n        selector: \"<sui-accordion>\",\n        properties: [{\n          name: \"closeOthers\",\n          type: \"boolean\",\n          description: \"Limits the number of open panels to 1 when <code>true</code>.\",\n          defaultValue: \"true\"\n        }, {\n          name: \"transition\",\n          type: \"string\",\n          description: \"Sets the transition on the content of each panel. N.B. doesn't affect the collapse animation.\",\n          defaultValue: \"fade\"\n        }, {\n          name: \"transitionDuration\",\n          type: \"number\",\n          description: \"Duration for the accordion animations.\",\n          defaultValue: \"350\"\n        }]\n      }, {\n        selector: \"<sui-accordion-panel>\",\n        properties: [{\n          name: \"isOpen\",\n          type: \"boolean\",\n          description: \"Sets whether or not the panel is open.\",\n          defaultValue: \"false\"\n        }, {\n          name: \"isDisabled\",\n          type: \"boolean\",\n          description: \"Sets whether or not the panel is disabled (locks current state).\",\n          defaultValue: \"false\"\n        }],\n        events: [{\n          name: \"isOpenChange\",\n          type: \"boolean\",\n          description: \"Fires whenever the panel is toggled. <code>[(isOpen)]</code> syntax is supported.\"\n        }]\n      }];\n      this.exampleStandardTemplate = exampleStandardTemplate;\n      this.exampleStyledTemplate = exampleStyledTemplate;\n      this.exampleManualTemplate = exampleManualTemplate;\n    }\n  }\n  _class = AccordionPage;\n  _class.ɵfac = function AccordionPage_Factory(t) {\n    return new (t || _class)();\n  };\n  _class.ɵcmp = /*@__PURE__*/i0.ɵɵdefineComponent({\n    type: _class,\n    selectors: [[\"demo-page-accordion\"]],\n    decls: 47,\n    vars: 5,\n    consts: [[\"header\", \"\"], [\"sub-header\", \"\"], [1, \"warning\", 3, \"isDismissable\"], [1, \"header\"], [\"routerLink\", \"/modules/collapse\"], [1, \"ui\", \"dividing\", \"header\"], [3, \"code\"], [\"info\", \"\"], [1, \"ui\", \"header\"], [\"result\", \"\"], [\"id\", \"api\", 1, \"ui\", \"dividing\", \"header\"], [3, \"api\"]],\n    template: function AccordionPage_Template(rf, ctx) {\n      if (rf & 1) {\n        i0.ɵɵelementStart(0, \"demo-page-title\")(1, \"div\", 0);\n        i0.ɵɵtext(2, \"Accordion\");\n        i0.ɵɵelementEnd();\n        i0.ɵɵelementStart(3, \"div\", 1)(4, \"p\");\n        i0.ɵɵtext(5, \"An accordion allows users to toggle the display of sections of content\");\n        i0.ɵɵelementEnd()()();\n        i0.ɵɵelementStart(6, \"demo-page-content\")(7, \"sui-message\", 2)(8, \"div\", 3);\n        i0.ɵɵtext(9, \"Important Note\");\n        i0.ɵɵelementEnd();\n        i0.ɵɵelementStart(10, \"p\");\n        i0.ɵɵtext(11, \" The accordion depends on the Web Animations API, which requires a polyfill for full browser support. Read the \");\n        i0.ɵɵelementStart(12, \"a\", 4);\n        i0.ɵɵtext(13, \"collapse docs\");\n        i0.ɵɵelementEnd();\n        i0.ɵɵtext(14, \" for guidance. \");\n        i0.ɵɵelementEnd()();\n        i0.ɵɵelementStart(15, \"h2\", 5);\n        i0.ɵɵtext(16, \"Examples\");\n        i0.ɵɵelementEnd();\n        i0.ɵɵelementStart(17, \"demo-example\", 6)(18, \"div\", 7)(19, \"h4\", 8);\n        i0.ɵɵtext(20, \"Accordion\");\n        i0.ɵɵelementEnd();\n        i0.ɵɵelementStart(21, \"p\");\n        i0.ɵɵtext(22, \"Standard accordion\");\n        i0.ɵɵelementEnd()();\n        i0.ɵɵelement(23, \"example-accordion-standard\", 9);\n        i0.ɵɵelementEnd();\n        i0.ɵɵelementStart(24, \"demo-example\", 6)(25, \"div\", 7)(26, \"h4\", 8);\n        i0.ɵɵtext(27, \"Styled\");\n        i0.ɵɵelementEnd();\n        i0.ɵɵelementStart(28, \"p\");\n        i0.ɵɵtext(29, \"Adding classes to the root element applies styles\");\n        i0.ɵɵelementEnd()();\n        i0.ɵɵelement(30, \"example-accordion-styled\", 9);\n        i0.ɵɵelementEnd();\n        i0.ɵɵelementStart(31, \"demo-example\", 6)(32, \"div\", 7)(33, \"h4\", 8);\n        i0.ɵɵtext(34, \"Manual\");\n        i0.ɵɵelementEnd();\n        i0.ɵɵelementStart(35, \"p\");\n        i0.ɵɵtext(36, \" By using \");\n        i0.ɵɵelementStart(37, \"code\");\n        i0.ɵɵtext(38, \"isDisabled\");\n        i0.ɵɵelementEnd();\n        i0.ɵɵtext(39, \" and \");\n        i0.ɵɵelementStart(40, \"code\");\n        i0.ɵɵtext(41, \"isOpen\");\n        i0.ɵɵelementEnd();\n        i0.ɵɵtext(42, \" you can change the element controlling the accordion. Click the arrow to open the panel. \");\n        i0.ɵɵelementEnd()();\n        i0.ɵɵelement(43, \"example-accordion-manual\", 9);\n        i0.ɵɵelementEnd();\n        i0.ɵɵelementStart(44, \"h2\", 10);\n        i0.ɵɵtext(45, \"API\");\n        i0.ɵɵelementEnd();\n        i0.ɵɵelement(46, \"demo-api\", 11);\n        i0.ɵɵelementEnd();\n      }\n      if (rf & 2) {\n        i0.ɵɵadvance(7);\n        i0.ɵɵproperty(\"isDismissable\", false);\n        i0.ɵɵadvance(10);\n        i0.ɵɵproperty(\"code\", ctx.exampleStandardTemplate);\n        i0.ɵɵadvance(7);\n        i0.ɵɵproperty(\"code\", ctx.exampleStyledTemplate);\n        i0.ɵɵadvance(7);\n        i0.ɵɵproperty(\"code\", ctx.exampleManualTemplate);\n        i0.ɵɵadvance(15);\n        i0.ɵɵproperty(\"api\", ctx.api);\n      }\n    },\n    encapsulation: 2\n  });\n  return AccordionPage;\n})();\nexport let AccordionExampleStandard = /*#__PURE__*/(() => {\n  var _class2;\n  class AccordionExampleStandard {}\n  _class2 = AccordionExampleStandard;\n  _class2.ɵfac = function AccordionExampleStandard_Factory(t) {\n    return new (t || _class2)();\n  };\n  _class2.ɵcmp = /*@__PURE__*/i0.ɵɵdefineComponent({\n    type: _class2,\n    selectors: [[\"example-accordion-standard\"]],\n    decls: 49,\n    vars: 4,\n    consts: [[3, \"closeOthers\"], [3, \"isOpen\"], [\"title\", \"\"], [1, \"dropdown\", \"icon\"], [\"content\", \"\"], [3, \"isDisabled\", \"isOpen\"]],\n    template: function AccordionExampleStandard_Template(rf, ctx) {\n      if (rf & 1) {\n        i0.ɵɵelementStart(0, \"sui-accordion\", 0)(1, \"sui-accordion-panel\", 1)(2, \"div\", 2);\n        i0.ɵɵelement(3, \"i\", 3);\n        i0.ɵɵtext(4, \" Intially Expanded Panel \");\n        i0.ɵɵelementEnd();\n        i0.ɵɵelementStart(5, \"div\", 4)(6, \"p\");\n        i0.ɵɵtext(7, \"Using \");\n        i0.ɵɵelementStart(8, \"code\");\n        i0.ɵɵtext(9, \"[isOpen]\");\n        i0.ɵɵelementEnd();\n        i0.ɵɵtext(10, \" sets the panel to be expanded.\");\n        i0.ɵɵelementEnd();\n        i0.ɵɵelementStart(11, \"p\");\n        i0.ɵɵtext(12, \"Use \");\n        i0.ɵɵelementStart(13, \"code\");\n        i0.ɵɵtext(14, \"(isOpenChange)\");\n        i0.ɵɵelementEnd();\n        i0.ɵɵtext(15, \" to catch when the panel is toggled.\");\n        i0.ɵɵelementEnd();\n        i0.ɵɵelementStart(16, \"p\");\n        i0.ɵɵtext(17, \"Supports \");\n        i0.ɵɵelementStart(18, \"code\");\n        i0.ɵɵtext(19, \"[(isOpen)]\");\n        i0.ɵɵelementEnd();\n        i0.ɵɵtext(20, \" syntax.\");\n        i0.ɵɵelementEnd()()();\n        i0.ɵɵelementStart(21, \"sui-accordion-panel\", 5)(22, \"div\", 2);\n        i0.ɵɵelement(23, \"i\", 3);\n        i0.ɵɵtext(24, \" Disabled Panel \");\n        i0.ɵɵelementEnd();\n        i0.ɵɵelementStart(25, \"div\", 4)(26, \"p\");\n        i0.ɵɵtext(27, \"Setting \");\n        i0.ɵɵelementStart(28, \"code\");\n        i0.ɵɵtext(29, \"[isDisabled]\");\n        i0.ɵɵelementEnd();\n        i0.ɵɵtext(30, \" to \");\n        i0.ɵɵelementStart(31, \"code\");\n        i0.ɵɵtext(32, \"true\");\n        i0.ɵɵelementEnd();\n        i0.ɵɵtext(33, \" stops the user from being able to toggle the panel.\");\n        i0.ɵɵelementEnd()()();\n        i0.ɵɵelementStart(34, \"sui-accordion-panel\")(35, \"div\", 2);\n        i0.ɵɵelement(36, \"i\", 3);\n        i0.ɵɵtext(37, \" Final Panel \");\n        i0.ɵɵelementEnd();\n        i0.ɵɵelementStart(38, \"div\", 4)(39, \"p\");\n        i0.ɵɵtext(40, \"This is the final panel.\");\n        i0.ɵɵelementEnd();\n        i0.ɵɵelementStart(41, \"p\");\n        i0.ɵɵtext(42, \"Opening this one doesn't affect the others as \");\n        i0.ɵɵelementStart(43, \"code\");\n        i0.ɵɵtext(44, \"[closeOthers]\");\n        i0.ɵɵelementEnd();\n        i0.ɵɵtext(45, \" is set to \");\n        i0.ɵɵelementStart(46, \"code\");\n        i0.ɵɵtext(47, \"false\");\n        i0.ɵɵelementEnd();\n        i0.ɵɵtext(48, \".\");\n        i0.ɵɵelementEnd()()()();\n      }\n      if (rf & 2) {\n        i0.ɵɵproperty(\"closeOthers\", false);\n        i0.ɵɵadvance(1);\n        i0.ɵɵproperty(\"isOpen\", true);\n        i0.ɵɵadvance(20);\n        i0.ɵɵproperty(\"isDisabled\", true)(\"isOpen\", true);\n      }\n    },\n    encapsulation: 2\n  });\n  return AccordionExampleStandard;\n})();\nexport let AccordionExampleStyled = /*#__PURE__*/(() => {\n  var _class3;\n  class AccordionExampleStyled {}\n  _class3 = AccordionExampleStyled;\n  _class3.ɵfac = function AccordionExampleStyled_Factory(t) {\n    return new (t || _class3)();\n  };\n  _class3.ɵcmp = /*@__PURE__*/i0.ɵɵdefineComponent({\n    type: _class3,\n    selectors: [[\"example-accordion-styled\"]],\n    decls: 18,\n    vars: 1,\n    consts: [[1, \"styled\", \"fluid\"], [3, \"isOpen\"], [\"title\", \"\"], [1, \"dropdown\", \"icon\"], [\"content\", \"\"]],\n    template: function AccordionExampleStyled_Template(rf, ctx) {\n      if (rf & 1) {\n        i0.ɵɵelementStart(0, \"sui-accordion\", 0)(1, \"sui-accordion-panel\", 1)(2, \"div\", 2);\n        i0.ɵɵelement(3, \"i\", 3);\n        i0.ɵɵtext(4, \" First Panel \");\n        i0.ɵɵelementEnd();\n        i0.ɵɵelementStart(5, \"div\", 4)(6, \"p\");\n        i0.ɵɵtext(7, \"Add classes to the \");\n        i0.ɵɵelementStart(8, \"code\");\n        i0.ɵɵtext(9, \"sui-accordion\");\n        i0.ɵɵelementEnd();\n        i0.ɵɵtext(10, \" element to apply styles.\");\n        i0.ɵɵelementEnd()()();\n        i0.ɵɵelementStart(11, \"sui-accordion-panel\")(12, \"div\", 2);\n        i0.ɵɵelement(13, \"i\", 3);\n        i0.ɵɵtext(14, \" Second Panel \");\n        i0.ɵɵelementEnd();\n        i0.ɵɵelementStart(15, \"div\", 4)(16, \"p\");\n        i0.ɵɵtext(17, \"Second panel content.\");\n        i0.ɵɵelementEnd()()()();\n      }\n      if (rf & 2) {\n        i0.ɵɵadvance(1);\n        i0.ɵɵproperty(\"isOpen\", true);\n      }\n    },\n    encapsulation: 2\n  });\n  return AccordionExampleStyled;\n})();\nexport let AccordionExampleManual = /*#__PURE__*/(() => {\n  var _class4;\n  class AccordionExampleManual {\n    constructor() {\n      this.panelOpen = false;\n    }\n  }\n  _class4 = AccordionExampleManual;\n  _class4.ɵfac = function AccordionExampleManual_Factory(t) {\n    return new (t || _class4)();\n  };\n  _class4.ɵcmp = /*@__PURE__*/i0.ɵɵdefineComponent({\n    type: _class4,\n    selectors: [[\"example-accordion-manual\"]],\n    decls: 8,\n    vars: 2,\n    consts: [[1, \"styled\", \"fluid\"], [3, \"isOpen\", \"isDisabled\", \"isOpenChange\"], [\"title\", \"\"], [1, \"dropdown\", \"icon\", 3, \"click\"], [\"content\", \"\"]],\n    template: function AccordionExampleManual_Template(rf, ctx) {\n      if (rf & 1) {\n        i0.ɵɵelementStart(0, \"sui-accordion\", 0)(1, \"sui-accordion-panel\", 1);\n        i0.ɵɵlistener(\"isOpenChange\", function AccordionExampleManual_Template_sui_accordion_panel_isOpenChange_1_listener($event) {\n          return ctx.panelOpen = $event;\n        });\n        i0.ɵɵelementStart(2, \"div\", 2)(3, \"i\", 3);\n        i0.ɵɵlistener(\"click\", function AccordionExampleManual_Template_i_click_3_listener() {\n          return ctx.panelOpen = !ctx.panelOpen;\n        });\n        i0.ɵɵelementEnd();\n        i0.ɵɵtext(4, \" Manual Panel \");\n        i0.ɵɵelementEnd();\n        i0.ɵɵelementStart(5, \"div\", 4)(6, \"p\");\n        i0.ɵɵtext(7, \"Content\");\n        i0.ɵɵelementEnd()()()();\n      }\n      if (rf & 2) {\n        i0.ɵɵadvance(1);\n        i0.ɵɵproperty(\"isOpen\", ctx.panelOpen)(\"isDisabled\", true);\n      }\n    },\n    encapsulation: 2\n  });\n  return AccordionExampleManual;\n})();\nexport const AccordionPageComponents = [AccordionPage, AccordionExampleStandard, AccordionExampleStyled, AccordionExampleManual];","map":null,"metadata":{},"sourceType":"module","externalDependencies":[]}