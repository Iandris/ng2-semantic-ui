{"ast":null,"code":"var __decorate = this && this.__decorate || function (decorators, target, key, desc) {\n  var c = arguments.length,\n    r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc,\n    d;\n  if (typeof Reflect === \"object\" && typeof Reflect.decorate === \"function\") r = Reflect.decorate(decorators, target, key, desc);else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;\n  return c > 3 && r && Object.defineProperty(target, key, r), r;\n};\nvar __metadata = this && this.__metadata || function (k, v) {\n  if (typeof Reflect === \"object\" && typeof Reflect.metadata === \"function\") return Reflect.metadata(k, v);\n};\nvar _a, _b, _c, _d;\nimport { Component, ViewChild } from \"@angular/core\";\nimport { SuiModalService, ModalTemplate, TemplateModalConfig, ComponentModalConfig, ModalSize, SuiModal } from \"ng2-semantic-ui\";\nimport { AlertModal } from \"../../../modals/alert.modal\";\nimport * as i0 from \"@angular/core\";\nconst exampleTemplateModalTemplate = `\n<ng-template let-context let-modal=\"modal\" #modalTemplate>\n    <div class=\"header\">Example</div>\n    <div class=\"content\">\n        <p>{{ context.data }}</p>\n    </div>\n    <div class=\"actions\">\n        <button class=\"ui red button\" (click)=\"modal.deny('denied')\">Cancel</button>\n        <button class=\"ui green button\" (click)=\"modal.approve('approved')\" autofocus>OK</button>\n    </div>\n</ng-template>\n`;\n// Don't use template concatenation here as the Angular compiler complains.\n// tslint:disable-next-line:prefer-template\nexport const exampleTemplateTemplate = exampleTemplateModalTemplate + `\n<div class=\"ui fluid action input\">\n    <input type=\"text\" placeholder=\"Modal content...\" [(ngModel)]=\"dynamicContent\">\n    <button class=\"ui primary button\" (click)=\"open(dynamicContent)\">Open</button>\n</div>\n`;\nconst exampleComponentModalTemplate = `\n<div class=\"header\">{{ modal.context.title }}</div>\n<div class=\"content\">\n    <p>{{ modal.context.question }}</p>\n</div>\n<div class=\"actions\">\n    <button class=\"ui red button\" (click)=\"modal.deny(undefined)\">Cancel</button>\n    <button class=\"ui green button\" (click)=\"modal.approve(undefined)\" autofocus>OK</button>\n</div>\n`;\nconst exampleComponentTemplate = `\n<div class=\"ui form\">\n<div class=\"field\">\n    <label>Modal Size:</label>\n    <sui-select class=\"selection\" [(ngModel)]=\"size\" [options]=\"availableSizes\" #sizes>\n        <sui-select-option *ngFor=\"let s of sizes.availableOptions\" [value]=\"s\"></sui-select-option>\n    </sui-select>\n</div>\n<button class=\"ui primary button\" (click)=\"open()\">Confirm?</button>\n</div>\n`;\nexport let ModalPage = /*#__PURE__*/(() => {\n  var _class;\n  class ModalPage {\n    constructor() {\n      this.api = [{\n        selector: \"<sui-modal>\",\n        properties: [{\n          name: \"isClosable\",\n          type: \"boolean\",\n          description: \"Sets whether the modal can be closed with a close button, clicking outside, or the <code>ESC</code> key.\",\n          defaultValue: \"true\"\n        }, {\n          name: \"closeResult\",\n          type: \"T\",\n          description: \"Sets the result to deny the modal with when closed. Used in combination with <code>isClosable</code>.\"\n        }, {\n          name: \"size\",\n          type: \"ModalSize\",\n          description: \"Sets the modal size. \" + \"Available options are: <code>mini</code>, <code>tiny</code>, <code>small</code>, \" + \"<code>normal</code> & <code>large</code>.\",\n          defaultValue: \"normal\"\n        }, {\n          name: \"isFullScreen\",\n          type: \"boolean\",\n          description: \"Sets whether the modal takes up the full width of the screen.\",\n          defaultValue: \"false\"\n        }, {\n          name: \"isBasic\",\n          type: \"boolean\",\n          description: \"Sets whether or not clicking the dimmer will dismiss it.\",\n          defaultValue: \"true\"\n        }, {\n          name: \"isInverted\",\n          type: \"boolean\",\n          description: \"Sets whether the modal displays against a light background.\",\n          defaultValue: \"false\"\n        }, {\n          name: \"isCentered\",\n          type: \"boolean\",\n          description: \"Whether or not the modal should be placed in the center of the page\",\n          defaultValue: \"true\"\n        }, {\n          name: \"mustScroll\",\n          type: \"boolean\",\n          description: \"Whether or not the modal should be always scrolling. \" + \"Should be used when the modal content is dynamic and can exceed the height of the browser\",\n          defaultValue: \"false\"\n        }, {\n          name: \"transition\",\n          type: \"string\",\n          description: \"Sets the transition used when displaying the modal.\",\n          defaultValue: \"scale\"\n        }, {\n          name: \"transitionDuration\",\n          type: \"number\",\n          description: \"Sets the duration for the modal transition.\",\n          defaultValue: \"500\"\n        }],\n        events: [{\n          name: \"approved\",\n          type: \"T\",\n          description: \"Fires when the modal closes, after <code>approve</code> has been called.\"\n        }, {\n          name: \"denied\",\n          type: \"U\",\n          description: \"Fires when the modal closes, after <code>deny</code> has been called.\"\n        }, {\n          name: \"dismissed\",\n          type: \"void\",\n          description: \"Fires when the modal closes, regardless of the modal outcome.\"\n        }]\n      }];\n      this.exampleTemplateTemplate = exampleTemplateModalTemplate;\n      this.autoCode = `\n<sui-modal [isClosable]=\"true\" (dismissed)=\"alert($event)\" #modal>\n    <div class=\"header\">Example</div>\n    <div class=\"content\">\n        <p>Modal content</p>\n    </div>\n    <div class=\"actions\">\n        <button class=\"ui red button\" (click)=\"modal.deny()\">Cancel</button>\n        <button class=\"ui green button\" (click)=\"modal.approve('done')\" autofocus>OK</button>\n    </div>\n</sui-modal>\n`;\n      this.templateTemplate = exampleTemplateModalTemplate;\n      this.templateComponent = `\nimport {SuiModalService, TemplateModalConfig, ModalTemplate} from 'ng2-semantic-ui';\n\nexport interface IContext {\n    data:string;\n}\n\n@Component({})\nexport class MyComponent {\n    @ViewChild('modalTemplate')\n    public modalTemplate:ModalTemplate<IContext, string, string>\n\n    constructor(public modalService:SuiModalService) {}\n}\n`;\n      this.templateOpen = `\npublic open(dynamicContent:string = \"Example\") {\n    const config = new TemplateModalConfig<IContext, string, string>(this.modalTemplate);\n\n    config.closeResult = \"closed!\";\n    config.context = { data: dynamicContent };\n\n    this.modalService\n        .open(config)\n        .onApprove(result => { /* approve callback */ })\n        .onDeny(result => { /* deny callback */});\n}\n`;\n      this.componentComponent = `\nimport {SuiModal, ComponentModalConfig, ModalSize} from \"ng2-semantic-ui\"\n\ninterface IConfirmModalContext {\n    title:string;\n    question:string;\n}\n\n@Component({\n    selector: 'modal-confirm',\n    template: \\`${exampleComponentModalTemplate}\\`\n})\nexport class ConfirmModalComponent {\n    constructor(public modal:SuiModal<IConfirmModalContext, void, void>) {}\n}\n`;\n      this.componentHelper = `\nexport class ConfirmModal extends ComponentModalConfig<IConfirmModalContext, void, void> {\n    constructor(title:string, question:string, size = ModalSize.Small) {\n        super(ConfirmModalComponent, { title, question });\n\n        this.isClosable = false;\n        this.transitionDuration = 200;\n        this.size = size;\n    }\n}\n`;\n      this.componentOpen = `\nthis.modalService\n    .open(new ConfirmModal(\"Are you sure?\", \"Are you sure about accepting this?\", this.modalSize))\n    .onApprove(() => alert(\"User has accepted.\"))\n    .onDeny(() => alert(\"User has denied.\"));\n`;\n    }\n  }\n  _class = ModalPage;\n  _class.ɵfac = function ModalPage_Factory(t) {\n    return new (t || _class)();\n  };\n  _class.ɵcmp = /*@__PURE__*/i0.ɵɵdefineComponent({\n    type: _class,\n    selectors: [[\"demo-page-modal\"]],\n    decls: 184,\n    vars: 8,\n    consts: [[\"header\", \"\"], [\"sub-header\", \"\"], [1, \"ui\", \"dividing\", \"header\"], [1, \"ui\", \"three\", \"wide\", \"stackable\", \"tabs\", \"menu\"], [\"suiTabHeader\", \"auto\", 1, \"item\"], [\"suiTabHeader\", \"template\", 1, \"item\"], [\"suiTabHeader\", \"component\", 1, \"item\"], [\"suiTabContent\", \"auto\", 1, \"ui\", \"segment\"], [1, \"ui\", \"segment\"], [\"language\", \"markup\", 3, \"src\"], [\"suiTabContent\", \"template\", 1, \"ui\", \"segment\"], [\"language\", \"typescript\", 3, \"src\"], [1, \"ui\", \"ordered\", \"list\"], [1, \"item\"], [\"suiTabContent\", \"component\", 1, \"ui\", \"segment\"], [\"id\", \"api\", 1, \"ui\", \"dividing\", \"header\"], [3, \"api\"]],\n    template: function ModalPage_Template(rf, ctx) {\n      if (rf & 1) {\n        i0.ɵɵelementStart(0, \"demo-page-title\")(1, \"div\", 0);\n        i0.ɵɵtext(2, \"Modal\");\n        i0.ɵɵelementEnd();\n        i0.ɵɵelementStart(3, \"div\", 1)(4, \"p\");\n        i0.ɵɵtext(5, \"A modal displays content that temporarily blocks interactions with the main view of a site\");\n        i0.ɵɵelementEnd()()();\n        i0.ɵɵelementStart(6, \"demo-page-content\")(7, \"h2\", 2);\n        i0.ɵɵtext(8, \"Examples\");\n        i0.ɵɵelementEnd();\n        i0.ɵɵelementStart(9, \"p\");\n        i0.ɵɵtext(10, \"The modal system is designed to be as flexible as possible.\");\n        i0.ɵɵelementEnd();\n        i0.ɵɵelementStart(11, \"p\");\n        i0.ɵɵtext(12, \"Each modal has two possible outcomes, \");\n        i0.ɵɵelementStart(13, \"code\");\n        i0.ɵɵtext(14, \"approve\");\n        i0.ɵɵelementEnd();\n        i0.ɵɵtext(15, \" or \");\n        i0.ɵɵelementStart(16, \"code\");\n        i0.ɵɵtext(17, \"deny\");\n        i0.ɵɵelementEnd();\n        i0.ɵɵtext(18, \", carrying a distinct result respectively, defined by the user.\");\n        i0.ɵɵelementEnd();\n        i0.ɵɵelementStart(19, \"p\");\n        i0.ɵɵtext(20, \"Transitions are built in and fully customisable, with timing handled out of the box (i.e. events don't fire until the modal has finished transitioning).\");\n        i0.ɵɵelementEnd();\n        i0.ɵɵelementStart(21, \"p\");\n        i0.ɵɵtext(22, \"Adding the \");\n        i0.ɵɵelementStart(23, \"code\");\n        i0.ɵɵtext(24, \"autofocus\");\n        i0.ɵɵelementEnd();\n        i0.ɵɵtext(25, \" attribute to an element inside the modal will give it focus when the modal opens.\");\n        i0.ɵɵelementEnd();\n        i0.ɵɵelementStart(26, \"p\");\n        i0.ɵɵtext(27, \"Creating modals can be done in 3 distinct ways, each shown below:\");\n        i0.ɵɵelementEnd();\n        i0.ɵɵelement(28, \"br\");\n        i0.ɵɵelementStart(29, \"sui-tabset\")(30, \"div\", 3)(31, \"a\", 4);\n        i0.ɵɵtext(32, \"Automatic\");\n        i0.ɵɵelementEnd();\n        i0.ɵɵelementStart(33, \"a\", 5);\n        i0.ɵɵtext(34, \"Template Based\");\n        i0.ɵɵelementEnd();\n        i0.ɵɵelementStart(35, \"a\", 6);\n        i0.ɵɵtext(36, \"Component Based\");\n        i0.ɵɵelementEnd()();\n        i0.ɵɵelementStart(37, \"div\", 7)(38, \"p\");\n        i0.ɵɵtext(39, \"This is the most simple form of modal dialog. They're created and used by adding a \");\n        i0.ɵɵelementStart(40, \"code\");\n        i0.ɵɵtext(41, \"<sui-modal>\");\n        i0.ɵɵelementEnd();\n        i0.ɵɵtext(42, \" element to your component:\");\n        i0.ɵɵelementEnd();\n        i0.ɵɵelementStart(43, \"div\", 8);\n        i0.ɵɵelement(44, \"demo-codeblock\", 9);\n        i0.ɵɵelementEnd();\n        i0.ɵɵelementStart(45, \"p\");\n        i0.ɵɵtext(46, \"Note the use of \");\n        i0.ɵɵelementStart(47, \"code\");\n        i0.ɵɵtext(48, \"#modal\");\n        i0.ɵɵelementEnd();\n        i0.ɵɵtext(49, \", used to access the \");\n        i0.ɵɵelementStart(50, \"code\");\n        i0.ɵɵtext(51, \"approve\");\n        i0.ɵɵelementEnd();\n        i0.ɵɵtext(52, \" and \");\n        i0.ɵɵelementStart(53, \"code\");\n        i0.ɵɵtext(54, \"deny\");\n        i0.ɵɵelementEnd();\n        i0.ɵɵtext(55, \" methods.\");\n        i0.ɵɵelementEnd();\n        i0.ɵɵelementStart(56, \"p\");\n        i0.ɵɵtext(57, \" Automatic modals are named as such because they open as soon as the component is rendered (i.e. you cannot control when they open).\");\n        i0.ɵɵelementEnd();\n        i0.ɵɵelementStart(58, \"p\");\n        i0.ɵɵtext(59, \" Therefore, the specific use case for this modal are routes in which the route opens up a modal dialog. To do this, set the route to be a component with an automatic modal and it will open immediately. You can then set the router to navigate when the \");\n        i0.ɵɵelementStart(60, \"code\");\n        i0.ɵɵtext(61, \"dismissed\");\n        i0.ɵɵelementEnd();\n        i0.ɵɵtext(62, \" event fires, e.g. \");\n        i0.ɵɵelementStart(63, \"code\");\n        i0.ɵɵtext(64, \"(dismissed)=\\\"router.navigate([...])\\\"\");\n        i0.ɵɵelementEnd();\n        i0.ɵɵtext(65, \". \");\n        i0.ɵɵelementEnd()();\n        i0.ɵɵelementStart(66, \"div\", 10)(67, \"p\");\n        i0.ɵɵtext(68, \"Template based modals are intended to be used as 'one off' modals, i.e. modals that cannot be easily reused elsewhere.\");\n        i0.ɵɵelementEnd();\n        i0.ɵɵelementStart(69, \"p\");\n        i0.ɵɵtext(70, \"As with component based modals, they're controlled by the \");\n        i0.ɵɵelementStart(71, \"code\");\n        i0.ɵɵtext(72, \"SuiModalService\");\n        i0.ɵɵelementEnd();\n        i0.ɵɵtext(73, \" which provides the ability to open a modal on the page.\");\n        i0.ɵɵelementEnd();\n        i0.ɵɵelementStart(74, \"p\");\n        i0.ɵɵtext(75, \" To open a template based modal, first you must write a template, using \");\n        i0.ɵɵelementStart(76, \"code\");\n        i0.ɵɵtext(77, \"let-context\");\n        i0.ɵɵelementEnd();\n        i0.ɵɵtext(78, \" and \");\n        i0.ɵɵelementStart(79, \"code\");\n        i0.ɵɵtext(80, \"let-modal=\\\"modal\\\"\");\n        i0.ɵɵelementEnd();\n        i0.ɵɵtext(81, \" to access the context and controls respectively. \");\n        i0.ɵɵelementEnd();\n        i0.ɵɵelementStart(82, \"div\", 8);\n        i0.ɵɵelement(83, \"demo-codeblock\", 9);\n        i0.ɵɵelementEnd();\n        i0.ɵɵelementStart(84, \"p\");\n        i0.ɵɵtext(85, \"Next, get access to your template from your component, and ensure you've loaded the modal service:\");\n        i0.ɵɵelementEnd();\n        i0.ɵɵelementStart(86, \"div\", 8);\n        i0.ɵɵelement(87, \"demo-codeblock\", 11);\n        i0.ɵɵelementEnd();\n        i0.ɵɵelementStart(88, \"p\");\n        i0.ɵɵtext(89, \"The three generic type paramaters of \");\n        i0.ɵɵelementStart(90, \"code\");\n        i0.ɵɵtext(91, \"ModalTemplate\");\n        i0.ɵɵelementEnd();\n        i0.ɵɵtext(92, \" are:\");\n        i0.ɵɵelementEnd();\n        i0.ɵɵelementStart(93, \"div\", 12)(94, \"div\", 13);\n        i0.ɵɵtext(95, \"The type of the modal context (usually just an interface)\");\n        i0.ɵɵelementEnd();\n        i0.ɵɵelementStart(96, \"div\", 13);\n        i0.ɵɵtext(97, \"The \");\n        i0.ɵɵelementStart(98, \"code\");\n        i0.ɵɵtext(99, \"approve\");\n        i0.ɵɵelementEnd();\n        i0.ɵɵtext(100, \" result type\");\n        i0.ɵɵelementEnd();\n        i0.ɵɵelementStart(101, \"div\", 13);\n        i0.ɵɵtext(102, \"The \");\n        i0.ɵɵelementStart(103, \"code\");\n        i0.ɵɵtext(104, \"deny\");\n        i0.ɵɵelementEnd();\n        i0.ɵɵtext(105, \" result type\");\n        i0.ɵɵelementEnd()();\n        i0.ɵɵelementStart(106, \"p\");\n        i0.ɵɵtext(107, \" In this case, the context is an object with a \");\n        i0.ɵɵelementStart(108, \"code\");\n        i0.ɵɵtext(109, \"data:string\");\n        i0.ɵɵelementEnd();\n        i0.ɵɵtext(110, \" property, and modal passes \");\n        i0.ɵɵelementStart(111, \"code\");\n        i0.ɵɵtext(112, \"string\");\n        i0.ɵɵelementEnd();\n        i0.ɵɵtext(113, \" values to both \");\n        i0.ɵɵelementStart(114, \"code\");\n        i0.ɵɵtext(115, \"approve\");\n        i0.ɵɵelementEnd();\n        i0.ɵɵtext(116, \" and \");\n        i0.ɵɵelementStart(117, \"code\");\n        i0.ɵɵtext(118, \"deny\");\n        i0.ɵɵelementEnd();\n        i0.ɵɵtext(119, \". \");\n        i0.ɵɵelementEnd();\n        i0.ɵɵelementStart(120, \"p\");\n        i0.ɵɵtext(121, \"Lastly, the modal can be opened as follows:\");\n        i0.ɵɵelementEnd();\n        i0.ɵɵelementStart(122, \"div\", 8);\n        i0.ɵɵelement(123, \"demo-codeblock\", 11);\n        i0.ɵɵelementEnd();\n        i0.ɵɵelementStart(124, \"p\");\n        i0.ɵɵtext(125, \"So, all together:\");\n        i0.ɵɵelementEnd();\n        i0.ɵɵelement(126, \"example-modal-template\");\n        i0.ɵɵelementEnd();\n        i0.ɵɵelementStart(127, \"div\", 14)(128, \"p\");\n        i0.ɵɵtext(129, \" Component based modals are intended to be used as 'reusable' modals, i.e. modals that can easily be repurposed to fit elsewhere. They provide an easy way to generate generic modals for your entire application with minimal effort, for example to easily replace \");\n        i0.ɵɵelementStart(130, \"code\");\n        i0.ɵɵtext(131, \"alert\");\n        i0.ɵɵelementEnd();\n        i0.ɵɵtext(132, \", \");\n        i0.ɵɵelementStart(133, \"code\");\n        i0.ɵɵtext(134, \"prompt\");\n        i0.ɵɵelementEnd();\n        i0.ɵɵtext(135, \" & \");\n        i0.ɵɵelementStart(136, \"code\");\n        i0.ɵɵtext(137, \"confirm\");\n        i0.ɵɵelementEnd();\n        i0.ɵɵtext(138, \" calls. \");\n        i0.ɵɵelementEnd();\n        i0.ɵɵelementStart(139, \"p\");\n        i0.ɵɵtext(140, \"As with template based modals, they're controlled by the \");\n        i0.ɵɵelementStart(141, \"code\");\n        i0.ɵɵtext(142, \"SuiModalService\");\n        i0.ɵɵelementEnd();\n        i0.ɵɵtext(143, \" which provides the ability to open a modal on the page.\");\n        i0.ɵɵelementEnd();\n        i0.ɵɵelementStart(144, \"p\");\n        i0.ɵɵtext(145, \"In this example, you will be run through the process of creating a replacement for \");\n        i0.ɵɵelementStart(146, \"code\");\n        i0.ɵɵtext(147, \"confirm\");\n        i0.ɵɵelementEnd();\n        i0.ɵɵtext(148, \".\");\n        i0.ɵɵelementEnd();\n        i0.ɵɵelementStart(149, \"p\");\n        i0.ɵɵtext(150, \" The first step is creating a component that acts as the modal content. For this, you need to define the interface for the modal context, as well as including \");\n        i0.ɵɵelementStart(151, \"code\");\n        i0.ɵɵtext(152, \"SuiModal\");\n        i0.ɵɵelementEnd();\n        i0.ɵɵtext(153, \" in the constructor - which is automatically injected into the component when it is generated and allows access to the \");\n        i0.ɵɵelementStart(154, \"code\");\n        i0.ɵɵtext(155, \"approve\");\n        i0.ɵɵelementEnd();\n        i0.ɵɵtext(156, \" and \");\n        i0.ɵɵelementStart(157, \"code\");\n        i0.ɵɵtext(158, \"deny\");\n        i0.ɵɵelementEnd();\n        i0.ɵɵtext(159, \" methods, as well as the aforementioned context. \");\n        i0.ɵɵelementEnd();\n        i0.ɵɵelementStart(160, \"div\", 8);\n        i0.ɵɵelement(161, \"demo-codeblock\", 11);\n        i0.ɵɵelementEnd();\n        i0.ɵɵelementStart(162, \"p\");\n        i0.ɵɵtext(163, \" Now the content component is set up, you must add it to \");\n        i0.ɵɵelementStart(164, \"code\");\n        i0.ɵɵtext(165, \"entryComponents\");\n        i0.ɵɵelementEnd();\n        i0.ɵɵtext(166, \" in the \");\n        i0.ɵɵelementStart(167, \"code\");\n        i0.ɵɵtext(168, \"NgModule\");\n        i0.ɵɵelementEnd();\n        i0.ɵɵtext(169, \" it's declared in, as otherwise Angular won't let you use it. \");\n        i0.ɵɵelementEnd();\n        i0.ɵɵelementStart(170, \"p\");\n        i0.ɵɵtext(171, \"Next, define a helper class that automatically configures all new modals of this type:\");\n        i0.ɵɵelementEnd();\n        i0.ɵɵelementStart(172, \"div\", 8);\n        i0.ɵɵelement(173, \"demo-codeblock\", 11);\n        i0.ɵɵelementEnd();\n        i0.ɵɵelementStart(174, \"p\");\n        i0.ɵɵtext(175, \"Lastly, to then use this new type of modal, do the following:\");\n        i0.ɵɵelementEnd();\n        i0.ɵɵelementStart(176, \"div\", 8);\n        i0.ɵɵelement(177, \"demo-codeblock\", 11);\n        i0.ɵɵelementEnd();\n        i0.ɵɵelementStart(178, \"p\");\n        i0.ɵɵtext(179, \"So, all together:\");\n        i0.ɵɵelementEnd();\n        i0.ɵɵelement(180, \"example-modal-component\");\n        i0.ɵɵelementEnd()();\n        i0.ɵɵelementStart(181, \"h2\", 15);\n        i0.ɵɵtext(182, \"API\");\n        i0.ɵɵelementEnd();\n        i0.ɵɵelement(183, \"demo-api\", 16);\n        i0.ɵɵelementEnd();\n      }\n      if (rf & 2) {\n        i0.ɵɵadvance(44);\n        i0.ɵɵproperty(\"src\", ctx.autoCode);\n        i0.ɵɵadvance(39);\n        i0.ɵɵproperty(\"src\", ctx.templateTemplate);\n        i0.ɵɵadvance(4);\n        i0.ɵɵproperty(\"src\", ctx.templateComponent);\n        i0.ɵɵadvance(36);\n        i0.ɵɵproperty(\"src\", ctx.templateOpen);\n        i0.ɵɵadvance(38);\n        i0.ɵɵproperty(\"src\", ctx.componentComponent);\n        i0.ɵɵadvance(12);\n        i0.ɵɵproperty(\"src\", ctx.componentHelper);\n        i0.ɵɵadvance(4);\n        i0.ɵɵproperty(\"src\", ctx.componentOpen);\n        i0.ɵɵadvance(6);\n        i0.ɵɵproperty(\"api\", ctx.api);\n      }\n    },\n    encapsulation: 2\n  });\n  return ModalPage;\n})();\nexport let ModalExampleTemplate = class ModalExampleTemplate {\n  constructor(modalService) {\n    this.modalService = modalService;\n    this.dynamicContent = \"Example of dynamic content.\";\n  }\n  open(dynamicContent = \"Example\") {\n    const config = new TemplateModalConfig(this.modalTemplate);\n    config.closeResult = \"dismissed\";\n    config.context = {\n      data: dynamicContent\n    };\n    this.modalService.open(config).onApprove(r => this.alert(`Accepted with result: '${r}'.`)).onDeny(r => this.alert(`Denied with result: '${r}'.`));\n  }\n  alert(message) {\n    this.modalService.open(new AlertModal(message));\n  }\n};\n__decorate([ViewChild(\"modalTemplate\"), __metadata(\"design:type\", typeof (_b = typeof ModalTemplate !== \"undefined\" && ModalTemplate) === \"function\" ? _b : Object)], ModalExampleTemplate.prototype, \"modalTemplate\", void 0);\nModalExampleTemplate = __decorate([Component({\n  selector: \"example-modal-template\",\n  template: exampleTemplateTemplate\n}), __metadata(\"design:paramtypes\", [typeof (_a = typeof SuiModalService !== \"undefined\" && SuiModalService) === \"function\" ? _a : Object])], ModalExampleTemplate);\nexport let ConfirmModalComponent = class ConfirmModalComponent {\n  constructor(modal) {\n    this.modal = modal;\n  }\n};\nConfirmModalComponent = __decorate([Component({\n  selector: \"example-modal-confirm\",\n  template: exampleComponentModalTemplate\n}), __metadata(\"design:paramtypes\", [typeof (_c = typeof SuiModal !== \"undefined\" && SuiModal) === \"function\" ? _c : Object])], ConfirmModalComponent);\nexport class ConfirmModal extends ComponentModalConfig {\n  constructor(title, question, size = ModalSize.Small) {\n    super(ConfirmModalComponent, {\n      title,\n      question\n    });\n    this.isClosable = false;\n    this.transitionDuration = 200;\n    this.size = size;\n  }\n}\nexport let ModalExampleComponent = class ModalExampleComponent {\n  constructor(modalService) {\n    this.modalService = modalService;\n    this.availableSizes = [\"mini\", \"tiny\", \"small\", \"normal\", \"large\"];\n    this.size = ModalSize.Small;\n  }\n  open() {\n    this.modalService.open(new ConfirmModal(\"Are you sure?\", \"Are you sure about accepting this?\", this.size)).onApprove(() => this.alert(\"User has accepted.\")).onDeny(() => this.alert(\"User has denied.\"));\n  }\n  alert(message) {\n    this.modalService.open(new AlertModal(message));\n  }\n};\nModalExampleComponent = __decorate([Component({\n  selector: \"example-modal-component\",\n  template: exampleComponentTemplate\n}), __metadata(\"design:paramtypes\", [typeof (_d = typeof SuiModalService !== \"undefined\" && SuiModalService) === \"function\" ? _d : Object])], ModalExampleComponent);\nexport const ModalPageComponents = [ModalPage, ModalExampleTemplate, ConfirmModalComponent, ModalExampleComponent];","map":null,"metadata":{},"sourceType":"module","externalDependencies":[]}